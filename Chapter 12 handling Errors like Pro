# Chapter 12: Error Handling - Basics

# Errors (exceptions) occur when something goes wrong in your program.
# We use try-except blocks to handle errors gracefully.

# Basic try-except structure
try:
    age = int(input("Enter your age: "))
    print("Next year you'll be:", age + 1)
except ValueError:
    print("Please enter a valid number.")

# Handling multiple exceptions
try:
    num1 = int(input("Enter first number: "))
    num2 = int(input("Enter second number: "))
    result = num1 / num2
    print("Result:", result)
except ValueError:
    print("Please enter valid numbers.")
except ZeroDivisionError:
    print("Cannot divide by zero.")

# Using else clause (runs if no exception occurs)
try:
    number = int(input("Enter a number: "))
except ValueError:
    print("Invalid input.")
else:
    print("Valid number entered:", number)

# Using finally clause (always runs)
try:
    file = open("test.txt", "r")
    content = file.read()
    print(content)
except FileNotFoundError:
    print("File not found.")
finally:
    print("This always executes.")

# Common exceptions
# ValueError - invalid value for operation
# ZeroDivisionError - division by zero
# FileNotFoundError - file doesn't exist
# IndexError - invalid list index
# KeyError - invalid dictionary key
# TypeError - wrong data type

# Example: Handling list operations
numbers = [1, 2, 3, 4, 5]

try:
    index = int(input("Enter index (0-4): "))
    print("Number at index:", numbers[index])
except ValueError:
    print("Please enter a valid number.")
except IndexError:
    print("Index out of range.")

# Example: Handling dictionary operations
person = {"name": "Ali", "age": 25}

try:
    key = input("Enter key (name/age/city): ")
    print("Value:", person[key])
except KeyError:
    print("Key not found in dictionary.")

# Custom error messages
try:
    age = int(input("Enter age: "))
    if age < 0:
        raise ValueError("Age cannot be negative.")
    print("Valid age:", age)
except ValueError as e:
    print("Error:", e)

# Practical Example: Safe Calculator
print("\nSafe Calculator")

def safe_calculate(operation, a, b):
    try:
        if operation == "add":
            return a + b
        elif operation == "subtract":
            return a - b
        elif operation == "multiply":
            return a * b
        elif operation == "divide":
            if b == 0:
                raise ZeroDivisionError("Cannot divide by zero.")
            return a / b
        else:
            raise ValueError("Invalid operation.")
    except (ValueError, ZeroDivisionError) as e:
        return f"Error: {e}"

# Test the calculator
print("5 + 3 =", safe_calculate("add", 5, 3))
print("10 / 0 =", safe_calculate("divide", 10, 0))
print("Invalid operation =", safe_calculate("power", 2, 3))

# Interactive calculator
print("\nInteractive Calculator")
while True:
    try:
        num1 = float(input("Enter first number (or 'quit' to exit): "))
        if input("Enter 'quit' to exit: ").lower() == 'quit':
            break
        
        num2 = float(input("Enter second number: "))
        operation = input("Enter operation (add/subtract/multiply/divide): ")
        
        result = safe_calculate(operation, num1, num2)
        print("Result:", result)
        
    except ValueError:
        print("Please enter valid numbers.")
    except KeyboardInterrupt:
        print("\nCalculator stopped.")
        break

# Best practices
# - Always handle specific exceptions when possible
# - Use meaningful error messages
# - Don't catch all exceptions with bare except
# - Use finally for cleanup operations
# - Log errors for debugging

# Summary
# - Use try-except to handle errors gracefully
# - Handle specific exceptions for better control
# - Use else for code that runs when no exception occurs
# - Use finally for cleanup code
# - Raise exceptions with meaningful messages
