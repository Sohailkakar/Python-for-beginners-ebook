# Chapter 10: File Handling - Basics

# File handling allows programs to read from and write to files.

# File modes
# "r" - read (default)
# "w" - write (creates new, overwrites existing)
# "a" - append (adds to existing)

# Writing to files
with open("sample.txt", "w") as file:
    file.write("Hello, this is my first file!\n")
    file.write("I am learning file handling in Python.\n")
    file.write("This is line three.")

print("File 'sample.txt' created.")

# Appending to files
with open("sample.txt", "a") as file:
    file.write("\nThis line was added later.\n")
    file.write("Append mode preserves existing content.")

print("Content appended to 'sample.txt'.")

# Reading entire file
with open("sample.txt", "r") as file:
    content = file.read()
    print("File content:")
    print(content)

# Reading line by line
with open("sample.txt", "r") as file:
    print("\nLine by line:")
    for line_number, line in enumerate(file, 1):
        print(f"Line {line_number}: {line.strip()}")

# Reading all lines into list
with open("sample.txt", "r") as file:
    lines = file.readlines()
    print(f"\nTotal lines: {len(lines)}")

# Error handling
def safe_read_file(filename):
    try:
        with open(filename, "r") as file:
            return file.read()
    except FileNotFoundError:
        print(f"Error: File '{filename}' not found.")
        return None
    except Exception as e:
        print(f"Error reading file: {e}")
        return None

def safe_write_file(filename, content):
    try:
        with open(filename, "w") as file:
            file.write(content)
        print(f"Successfully wrote to '{filename}'")
        return True
    except Exception as e:
        print(f"Error writing file: {e}")
        return False

# Test error handling
content = safe_read_file("nonexistent.txt")
if content is None:
    print("File reading failed as expected.")

# Working with CSV files
import csv

# Writing CSV
students = [
    ["Name", "Age", "Grade"],
    ["Ali", "20", "A"],
    ["Sara", "22", "B"],
    ["Ahmed", "21", "A"]
]

with open("students.csv", "w", newline="") as file:
    writer = csv.writer(file)
    writer.writerows(students)

print("CSV file 'students.csv' created.")

# Reading CSV
with open("students.csv", "r") as file:
    reader = csv.reader(file)
    print("CSV content:")
    for row in reader:
        print(row)

# Working with JSON files
import json

# Writing JSON
person = {
    "name": "Sohail",
    "age": 25,
    "city": "Karachi",
    "skills": ["Python", "JavaScript"]
}

with open("person.json", "w") as file:
    json.dump(person, file, indent=2)

print("JSON file 'person.json' created.")

# Reading JSON
with open("person.json", "r") as file:
    data = json.load(file)
    print("JSON content:")
    print(data)

# File operations
import os

# Check if file exists
if os.path.exists("sample.txt"):
    size = os.path.getsize("sample.txt")
    print(f"File size: {size} bytes")

# Copy file content
def copy_file(source, dest):
    try:
        with open(source, "r") as src:
            content = src.read()
        with open(dest, "w") as dst:
            dst.write(content)
        print(f"Copied '{source}' to '{dest}'")
    except FileNotFoundError:
        print(f"Source file '{source}' not found.")

copy_file("sample.txt", "sample_copy.txt")

# Practical Example: Simple Notes App
print("\nSimple Notes App")

def add_note(note):
    with open("notes.txt", "a") as file:
        file.write(note + "\n")
    print("Note saved!")

def read_notes():
    try:
        with open("notes.txt", "r") as file:
            notes = file.readlines()
            if notes:
                print("Your notes:")
                for i, note in enumerate(notes, 1):
                    print(f"{i}. {note.strip()}")
            else:
                print("No notes found.")
    except FileNotFoundError:
        print("No notes file found.")

# Test the notes app
add_note("Learn Python file handling")
add_note("Practice with CSV and JSON")
read_notes()

# Summary
# - Use 'with' statements for automatic file closing
# - Handle exceptions for file operations
# - Different modes: 'r', 'w', 'a'
# - CSV for tabular data, JSON for structured data
# - Always close files or use context managers
